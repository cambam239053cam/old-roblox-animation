-- Client-side only script
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Prevent server-side manipulations
game.Players.LocalPlayer.Character:BreakJoints()
game.Players.LocalPlayer.Character = nil

local connection = game.Workspace.DescendantAdded:Connect(function(c)
    if c.Name == "Animate" then
        c.Disabled = true
    end
end)

repeat wait() until game.Players.LocalPlayer.Character
local char = game.Players.LocalPlayer.Character

-- Local Died event to clean up
local humanoid = char:WaitForChild("Humanoid")
local diedConnection
diedConnection = humanoid.Died:Connect(function()
    connection:Disconnect()
    diedConnection:Disconnect()
end)

wait(0.1)

-- Helper function for waiting for a child
function waitForChild(parent, childName)
    local child = parent:FindFirstChild(childName)
    if child then return child end
    while true do
        child = parent.ChildAdded:Wait()
        if child.Name == childName then return child end
    end
end

-- Declarations
local torso = waitForChild(char, "Torso")
local rightShoulder = waitForChild(torso, "Right Shoulder")
local leftShoulder = waitForChild(torso, "Left Shoulder")
local rightHip = waitForChild(torso, "Right Hip")
local leftHip = waitForChild(torso, "Left Hip")
local neck = waitForChild(torso, "Neck")
local humanoid = waitForChild(char, "Humanoid")
local pose = "Standing"
local toolAnim = "None"
local toolAnimTime = 0
local jumpMaxLimbVelocity = 0.75

-- Event functions for animation states
function onRunning(speed)
    pose = (speed > 0) and "Running" or "Standing"
end

function onDied()
    pose = "Dead"
end

function onJumping()
    pose = "Jumping"
end

function onClimbing()
    pose = "Climbing"
end

function onGettingUp()
    pose = "GettingUp"
end

function onFreeFall()
    pose = "FreeFall"
end

function onFallingDown()
    pose = "FallingDown"
end

function onSeated()
    pose = "Seated"
end

function onPlatformStanding()
    pose = "PlatformStanding"
end

function onSwimming(speed)
    pose = (speed > 0) and "Running" or "Standing"
end

-- Animation functions
function moveJump()
    rightShoulder.MaxVelocity = jumpMaxLimbVelocity
    leftShoulder.MaxVelocity = jumpMaxLimbVelocity
    rightShoulder:SetDesiredAngle(3.14)
    leftShoulder:SetDesiredAngle(-3.14)
    rightHip:SetDesiredAngle(0)
    leftHip:SetDesiredAngle(0)
end

function moveFreeFall()
    rightShoulder.MaxVelocity = jumpMaxLimbVelocity
    leftShoulder.MaxVelocity = jumpMaxLimbVelocity
    rightShoulder:SetDesiredAngle(3.14)
    leftShoulder:SetDesiredAngle(-3.14)
    rightHip:SetDesiredAngle(0)
    leftHip:SetDesiredAngle(0)
end

function moveSit()
    rightShoulder.MaxVelocity = 0.15
    leftShoulder.MaxVelocity = 0.15
    rightShoulder:SetDesiredAngle(3.14 / 2)
    leftShoulder:SetDesiredAngle(-3.14 / 2)
    rightHip:SetDesiredAngle(3.14 / 2)
    leftHip:SetDesiredAngle(-3.14 / 2)
end

function getTool()
    for _, kid in ipairs(char:GetChildren()) do
        if kid.ClassName == "Tool" then return kid end
    end
    return nil
end

function getToolAnim(tool)
    for _, c in ipairs(tool:GetChildren()) do
        if c.Name == "toolanim" and c.ClassName == "StringValue" then
            return c
        end
    end
    return nil
end

function animateTool()
    if toolAnim == "None" then
        rightShoulder:SetDesiredAngle(1.57)
        return
    end
    if toolAnim == "Slash" then
        rightShoulder.MaxVelocity = 0.5
        rightShoulder:SetDesiredAngle(0)
        return
    end
    if toolAnim == "Lunge" then
        rightShoulder.MaxVelocity = 0.5
        leftShoulder.MaxVelocity = 0.5
        rightHip.MaxVelocity = 0.5
        leftHip.MaxVelocity = 0.5
        rightShoulder:SetDesiredAngle(1.57)
        leftShoulder:SetDesiredAngle(1.0)
        rightHip:SetDesiredAngle(1.57)
        leftHip:SetDesiredAngle(1.0)
        return
    end
end

function move(time)
    local amplitude
    local frequency

    if pose == "Jumping" then
        moveJump()
        return
    end
    if pose == "FreeFall" then
        moveFreeFall()
        return
    end
    if pose == "Seated" then
        moveSit()
        return
    end

    local climbFudge = 0
    if pose == "Running" then
        if rightShoulder.CurrentAngle > 1.5 or rightShoulder.CurrentAngle < -1.5 then
            rightShoulder.MaxVelocity = jumpMaxLimbVelocity
        else  
            rightShoulder.MaxVelocity = 0.15
        end
        if leftShoulder.CurrentAngle > 1.5 or leftShoulder.CurrentAngle < -1.5 then
            leftShoulder.MaxVelocity = jumpMaxLimbVelocity
        else  
            leftShoulder.MaxVelocity = 0.15
        end
        amplitude = 1
        frequency = 9
    elseif pose == "Climbing" then
        rightShoulder.MaxVelocity = 0.5
        leftShoulder.MaxVelocity = 0.5
        amplitude = 1
        frequency = 9
        climbFudge = 3.14
    else
        amplitude = 0.1
        frequency = 1
    end

    local desiredAngle = amplitude * math.sin(time * frequency)
    rightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
    leftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
    rightHip:SetDesiredAngle(-desiredAngle)
    leftHip:SetDesiredAngle(-desiredAngle)

    local tool = getTool()
    if tool then
        local animStringValueObject = getToolAnim(tool)
        if animStringValueObject then
            toolAnim = animStringValueObject.Value
            animStringValueObject.Parent = nil
            toolAnimTime = time + 0.3
        end
        if time > toolAnimTime then
            toolAnimTime = 0
            toolAnim = "None"
        end
        animateTool()
    else
        toolAnim = "None"
        toolAnimTime = 0
    end
end

-- Connect events for animation updates
humanoid.Died:Connect(onDied)
humanoid.Running:Connect(onRunning)
humanoid.Jumping:Connect(onJumping)
humanoid.Climbing:Connect(onClimbing)
humanoid.GettingUp:Connect(onGettingUp)
humanoid.FreeFalling:Connect(onFreeFall)
humanoid.FallingDown:Connect(onFallingDown)
humanoid.Seated:Connect(onSeated)
humanoid.PlatformStanding:Connect(onPlatformStanding)
humanoid.Swimming:Connect(onSwimming)

-- Main program loop
local runService = game:GetService("RunService")
while char.Parent do
    local _, time = wait(0.1)
    move(time)
end
